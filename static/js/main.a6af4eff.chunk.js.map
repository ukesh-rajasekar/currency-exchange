{"version":3,"sources":["configs/themes.js","configs/colors.js","components/Shared/CurrencySymbols.js","components/Shared/CurrencyToPoll.js","services/currencyAPIs.js","components/Shared/DropdownList.js","app/exchangesSlice.js","components/Rates/ExchangeRateTable.js","pages/Rates.js","components/charts/LineCharts.js","components/charts/ChunckCalls.js","pages/Charts.js","components/saved/Calculate.js","components/saved/Convert.js","components/saved/ConversionHistoryCard.js","pages/Conversion.js","components/Shared/Tabs.js","App.js","app/store.js","index.js"],"names":["primary","secondary","info","warning","success","error","darkTheme","createTheme","palette","mode","main","components","MuiPaper","styleOverrides","root","flexGrow","currencySymbols","USD","AUD","EUR","INR","CRC","BTC","GBP","ILS","JPY","KRW","currencyToPoll","exchangeApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getExchangeRatesByCurrency","query","name","useGetExchangeRatesByCurrencyQuery","DropdownList2","props","value","onChange","isFiltered","React","currencies","setCurrencies","symbol","setSymbol","data","isLoading","Box","sx","display","flexDirection","alignItems","justifyContent","textAlign","padding","InputLabel","id","Select","labelId","label","toUpperCase","color","Object","keys","filter","currency","currencyCode","undefined","getFilteredCurrency","map","MenuItem","exchangesSlice","createSlice","initialState","convertionsList","tableRowData","TimseSeries","AUDExchangeRates","aud","usd","inr","eur","crc","reducers","addToConvertions","state","action","push","payload","setTableRowData","addTimeSeries","addAUDExchangeRates","actions","StyledTableCell","styled","TableCell","theme","tableCellClasses","head","backgroundColor","common","black","white","body","fontSize","StyledTableRow","TableRow","hover","border","getResults","ExchangeRateTable","fromCurrency","MyDateString","dateObj","Date","setDate","getDate","toDate","toMonth","getMonth","getFullYear","slice","getYesterdaysDate","useSelector","exchanges","dispatch","useDispatch","exchangeRate","toLowerCase","latestData","latestError","latestIsLoading","yesterdaysExchangeRate","yesterdaysData","yesterdaysError","yesterdaysIsLoading","getPercentageChange","todaysRate","yesterdaysRate","latest","yesterdays","from","rowData","entries","index","code","yesterday","change","createData","generateTableData","TableContainer","component","Paper","Table","className","tableLayout","aria-label","TableHead","align","TableBody","row","scope","toFixed","Rates","useState","setFromCurrency","overflowX","elevation","e","target","LineCharts","toCurrency","plotData","labels","datasets","fill","borderColor","options","scales","yAxes","ticks","beginAtZero","responsive","maintainAspectRatio","legend","position","isFetching","ChunckCalls","pollingInterval","audRates","audData","audIsFetching","inrRates","inrData","inrIsFetching","usdRates","usdData","usdIsFetching","eurRates","eurData","eurIsFetching","crcRates","crcData","crcIsFetching","countries","storeExchangeRates","a","i","length","dateTime","toLocaleString","useEffect","Charts","setToCurrency","flexWrap","overflow","p","Grid","container","spacing","direction","item","xs","md","Typography","gutterBottom","toLocaleLowerCase","Calculate","amount","convertionAmount","setConvertionAmount","convert","cvtAmount","items","to","convertionTime","now","save","Number","alignSelf","Button","variant","onClick","Convert","setAmount","console","log","noValidate","autoComplete","FormControl","Input","placeholder","type","startAdornment","InputAdornment","ConversionHistoryCard","arrayForSort","len","minWidth","marginTop","reverse","exchange","Card","CardContent","date","Conversion","CenteredTabs","setValue","width","Tabs","event","newValue","centered","Tab","App","Container","fixed","store","configureStore","reducer","exchangesReducer","middleware","getDefaultMiddleware","concat","setupListeners","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6af4eff.chunk.js","sourcesContent":["import { createTheme } from '@mui/material';\r\nimport { colors } from './colors';\r\n// const colors = {\r\n//   lightShade: '#80BFAA',\r\n//   darkShade: '#287075',\r\n//   highlight: '#F7D854',\r\n//   shadow: '#1B4252',\r\n//   success: '#00D909',\r\n//   danger: '#FF3000',\r\n//   primary: '#0085FF',\r\n// };\r\nconst { primary, secondary, info, warning, success, error } = colors;\r\n\r\nexport const lightTheme = createTheme({\r\n   palette: {\r\n      mode: 'light',\r\n   },\r\n});\r\nexport const darkTheme = createTheme({\r\n   palette: {\r\n      mode: 'dark',\r\n      primary: {\r\n         main: primary,\r\n      },\r\n      secondary: {\r\n         main: secondary,\r\n      },\r\n      info: {\r\n         main: info,\r\n      },\r\n      warning: {\r\n         main: warning,\r\n      },\r\n      success: {\r\n         main: success,\r\n      },\r\n      error: {\r\n         main: error,\r\n      },\r\n   },\r\n\r\n   components: {\r\n      MuiPaper: {\r\n         styleOverrides: {\r\n            // Name of the slot\r\n            root: {\r\n               // Some CSS\r\n               // width: '100%',\r\n               flexGrow: '1',\r\n            },\r\n         },\r\n      },\r\n   },\r\n});\r\n","export const colors = {\r\n   lightShade: '#80BFAA',\r\n   darkShade: '#287075',\r\n   info: '#F7D854',\r\n   warning: '#0085FF',\r\n   success: '#2FE000',\r\n   error: '#FF3000',\r\n   primary: '#2FE000',\r\n   secondary: '#ffffff',\r\n};\r\n","export var currencySymbols = {\r\n   USD: '$', // US Dollar\r\n   AUD: '$', // AUS Dollar\r\n   EUR: '€', // Euro\r\n   INR: '₹', // Indian Rupee\r\n   CRC: '₡', // Costa Rican Colón\r\n   BTC: '฿',\r\n   GBP: '£', // British Pound Sterling\r\n   ILS: '₪', // Israeli New Sheqel\r\n   JPY: '¥', // Japanese Yen\r\n   KRW: '₩', // South Korean Won\r\n};\r\n\r\n// NGN: '₦', // Nigerian Naira\r\n// PHP: '₱', // Philippine Peso\r\n// PLN: 'zł', // Polish Zloty\r\n// PYG: '₲', // Paraguayan Guarani\r\n// THB: '฿', // Thai Baht\r\n// UAH: '₴', // Ukrainian Hryvnia\r\n// VND: '₫', // Vietnamese Dong\r\n","export var currencyToPoll = {\r\n   USD: '$', // US Dollar\r\n   AUD: '$', // AUS Dollar\r\n   EUR: '€', // Euro\r\n   INR: '₹', // Indian Rupee\r\n   CRC: '₡', // Costa Rican Colón\r\n};\r\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\n// Define a service using a base URL and expected endpoints\r\nexport const exchangeApi = createApi({\r\n   reducerPath: 'exchangeApi',\r\n   baseQuery: fetchBaseQuery({\r\n      baseUrl: 'https://cdn.jsdelivr.net/gh/fawazahmed0/currency-api@1/',\r\n   }),\r\n   endpoints: (builder) => ({\r\n      getExchangeRatesByCurrency: builder.query({\r\n         query: (name) => `/${name}`,\r\n      }),\r\n   }),\r\n});\r\n\r\n// Export hooks for usage in functional components, which are\r\n// auto-generated based on the defined endpoints\r\nexport const { useGetExchangeRatesByCurrencyQuery } = exchangeApi;\r\n","import * as React from 'react';\r\nimport { currencySymbols } from './CurrencySymbols';\r\nimport { currencyToPoll } from './CurrencyToPoll';\r\n\r\nimport { useGetExchangeRatesByCurrencyQuery } from '../../services/currencyAPIs';\r\n\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function DropdownList2(props) {\r\n   const { name, value, onChange, isFiltered } = props;\r\n   const [currencies, setCurrencies] = React.useState(null);\r\n   const [symbol, setSymbol] = React.useState(false);\r\n\r\n   const { data, error, isLoading } = useGetExchangeRatesByCurrencyQuery(\r\n      'latest/currencies.json'\r\n   );\r\n\r\n   const getFilteredCurrency = (currencyCode) => {\r\n      if (symbol[currencyCode.toUpperCase()] != undefined) {\r\n         return currencyCode;\r\n      }\r\n   };\r\n\r\n   React.useEffect(() => {\r\n      setCurrencies(data);\r\n      if (isFiltered) {\r\n         setSymbol(currencyToPoll);\r\n      } else {\r\n         setSymbol(currencySymbols);\r\n      }\r\n   }, [data]);\r\n\r\n   return (\r\n      <Box\r\n         sx={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            textAlign: 'center',\r\n            padding: '1%',\r\n         }}\r\n      >\r\n         <InputLabel id='demo-simple-select-autowidth-label'>{name}</InputLabel>\r\n         <Select\r\n            labelId='demo-simple-select-autowidth-label'\r\n            name={name}\r\n            label={name}\r\n            value={value.toUpperCase()}\r\n            onChange={onChange}\r\n            sx={{ color: 'white' }}\r\n         >\r\n            {currencies &&\r\n               Object.keys(currencies)\r\n                  .filter((currency) => getFilteredCurrency(currency))\r\n                  .map((currency) => {\r\n                     return (\r\n                        <MenuItem\r\n                           color='primary'\r\n                           key={currency}\r\n                           value={currency.toUpperCase()}\r\n                        >\r\n                           {symbol[currency.toUpperCase()]}{' '}\r\n                           {currency.toUpperCase()} - {currencies[currency]}\r\n                        </MenuItem>\r\n                     );\r\n                  })}\r\n         </Select>\r\n      </Box>\r\n   );\r\n}\r\n","import { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\nconst exchangesSlice = createSlice({\r\n   name: 'exchanges',\r\n   initialState: {\r\n      convertionsList: [],\r\n      tableRowData: [],\r\n      TimseSeries: [],\r\n      AUDExchangeRates: {\r\n         aud: {},\r\n         usd: {},\r\n         inr: {},\r\n         eur: {},\r\n         crc: {},\r\n      },\r\n   },\r\n   reducers: {\r\n      addToConvertions: (state, action) => {\r\n         // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n         // doesn't actually mutate the state because it uses the Immer library,\r\n         // which detects changes to a \"draft state\" and produces a brand new\r\n         // immutable state based off those changes\r\n         state.convertionsList.push(action.payload);\r\n      },\r\n      setTableRowData: (state, action) => {\r\n         state.tableRowData = action.payload;\r\n      },\r\n\r\n      addTimeSeries: (state, action) => {\r\n         state.TimseSeries.push(action.payload);\r\n      },\r\n\r\n      addAUDExchangeRates: (state, action) => {\r\n         // console.log(action);\r\n         if (\r\n            state.AUDExchangeRates[action.payload[0]][action.payload[1]] !==\r\n            undefined\r\n         ) {\r\n            state.AUDExchangeRates[action.payload[0]][action.payload[1]].push(\r\n               action.payload[2]\r\n            );\r\n         } else {\r\n            state.AUDExchangeRates[action.payload[0]][action.payload[1]] = [\r\n               action.payload[2],\r\n            ];\r\n         }\r\n      },\r\n   },\r\n});\r\n\r\nexport const {\r\n   addToConvertions,\r\n   setTableRowData,\r\n   addTimeSeries,\r\n   addAUDExchangeRates,\r\n} = exchangesSlice.actions;\r\n\r\nexport default exchangesSlice.reducer;\r\n","import * as React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useGetExchangeRatesByCurrencyQuery } from '../../services/currencyAPIs';\r\nimport { currencySymbols } from '../Shared/CurrencySymbols';\r\n\r\nimport { styled } from '@mui/material/styles';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { setTableRowData } from '../../app/exchangesSlice';\r\nimport { Typography } from '@mui/material';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n   [`&.${tableCellClasses.head}`]: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n   },\r\n   [`&.${tableCellClasses.body}`]: {\r\n      fontSize: 14,\r\n   },\r\n}));\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n   '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n   },\r\n   // hide last border\r\n   '&:last-child td, &:last-child th': {\r\n      border: 0,\r\n   },\r\n}));\r\n\r\nfunction createData(code, symbol, latest, yesterday, change) {\r\n   return {\r\n      code,\r\n      symbol,\r\n      latest,\r\n      yesterday,\r\n      change,\r\n   };\r\n}\r\n\r\nconst getResults = (data) => {\r\n   return [data.data, data.error, data.isLoading];\r\n};\r\n\r\nconst getYesterdaysDate = () => {\r\n   var dateObj = new Date();\r\n\r\n   dateObj.setDate(dateObj.getDate() - 2);\r\n   var toDate = dateObj.getDate();\r\n   var toMonth = dateObj.getMonth() + 1;\r\n   var toYear = dateObj.getFullYear();\r\n   var yesterday =\r\n      toYear + '-' + ('0' + toMonth).slice(-2) + '-' + ('0' + toDate).slice(-2);\r\n\r\n   return yesterday;\r\n};\r\n\r\nexport default function ExchangeRateTable(props) {\r\n   const { fromCurrency } = props;\r\n\r\n   var MyDateString = getYesterdaysDate();\r\n\r\n   const { tableRowData } = useSelector((state) => state.exchanges);\r\n   const dispatch = useDispatch();\r\n   const exchangeRate = useGetExchangeRatesByCurrencyQuery(\r\n      `latest/currencies/${fromCurrency.toLowerCase()}.json`\r\n   );\r\n\r\n   const [latestData, latestError, latestIsLoading] = getResults(exchangeRate);\r\n\r\n   const yesterdaysExchangeRate = useGetExchangeRatesByCurrencyQuery(\r\n      `${MyDateString}/currencies/${fromCurrency.toLowerCase()}.json`\r\n   );\r\n\r\n   const [yesterdaysData, yesterdaysError, yesterdaysIsLoading] = getResults(\r\n      yesterdaysExchangeRate\r\n   );\r\n\r\n   const generateTableData = (latest, yesterdays, from) => {\r\n      const rowData = Object.entries(currencySymbols).map(\r\n         ([currency, symbol], index) => {\r\n            return createData(\r\n               currency,\r\n               symbol,\r\n               latest?.[from.toLowerCase()][currency.toLowerCase()],\r\n               yesterdays?.[from.toLowerCase()][currency.toLowerCase()],\r\n               99\r\n            );\r\n         }\r\n      );\r\n      dispatch(setTableRowData(rowData));\r\n   };\r\n\r\n   const getPercentageChange = (todaysRate, yesterdaysRate) => {\r\n      if (todaysRate > yesterdaysRate) {\r\n         return 1;\r\n      } else if (todaysRate < yesterdaysRate) {\r\n         return -1;\r\n      } else {\r\n         return 0;\r\n      }\r\n   };\r\n\r\n   React.useEffect(() => {\r\n      if (\r\n         !latestData?.[fromCurrency.toLowerCase()] ||\r\n         !yesterdaysData?.[fromCurrency.toLowerCase()]\r\n      ) {\r\n         return null;\r\n      }\r\n      generateTableData(latestData, yesterdaysData, fromCurrency);\r\n   }, [latestData, yesterdaysData]);\r\n\r\n   if (yesterdaysError | latestError) {\r\n      return <>Oh! there is an error</>;\r\n   } else if (latestIsLoading | yesterdaysIsLoading) {\r\n      return <>Loading....</>;\r\n   }\r\n\r\n   return (\r\n      <TableContainer component={Paper}>\r\n         <Table\r\n            className='table-wrapper'\r\n            sx={{ tableLayout: 'fixed' }}\r\n            aria-label='customized table'\r\n         >\r\n            <TableHead>\r\n               <TableRow>\r\n                  <StyledTableCell className='table-cell'>\r\n                     Currency Code\r\n                  </StyledTableCell>\r\n                  <StyledTableCell className='table-cell' align='right'>\r\n                     Symbol\r\n                  </StyledTableCell>\r\n                  <StyledTableCell className='table-cell' align='right'>\r\n                     Latest Exchange Rate\r\n                  </StyledTableCell>\r\n                  <StyledTableCell className='table-cell' align='right'>\r\n                     Yesterdays Exchange Rate\r\n                  </StyledTableCell>\r\n                  <StyledTableCell className='table-cell' align='right'>\r\n                     % Change\r\n                  </StyledTableCell>\r\n               </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n               {tableRowData.map((row) => (\r\n                  <StyledTableRow key={row.code}>\r\n                     <StyledTableCell\r\n                        className='table-cell'\r\n                        component='th'\r\n                        scope='row'\r\n                     >\r\n                        {row.code}\r\n                     </StyledTableCell>\r\n                     <StyledTableCell className='table-cell' align='right'>\r\n                        {row.symbol}\r\n                     </StyledTableCell>\r\n                     <StyledTableCell className='table-cell' align='right'>\r\n                        {row.latest.toFixed(3)}\r\n                     </StyledTableCell>\r\n                     <StyledTableCell className='table-cell' align='right'>\r\n                        {row.yesterday.toFixed(3)}\r\n                     </StyledTableCell>\r\n\r\n                     {getPercentageChange(row.latest, row.yesterday) > 0 && (\r\n                        <StyledTableCell\r\n                           className='table-cell'\r\n                           align='right'\r\n                           sx={{ color: '#2FE000' }}\r\n                        >\r\n                           +\r\n                           {(\r\n                              ((row.latest - row.yesterday) / row.yesterday) *\r\n                              100\r\n                           ).toFixed(3)}\r\n                           %\r\n                        </StyledTableCell>\r\n                     )}\r\n                     {getPercentageChange(row.latest, row.yesterday) < 0 && (\r\n                        <StyledTableCell\r\n                           className='table-cell'\r\n                           align='right'\r\n                           sx={{ color: '#FF3000' }}\r\n                        >\r\n                           -\r\n                           {(\r\n                              ((row.yesterday - row.latest) / row.yesterday) *\r\n                              100\r\n                           ).toFixed(3)}\r\n                           %\r\n                        </StyledTableCell>\r\n                     )}\r\n                     {getPercentageChange(row.latest, row.yesterday) == 0 && (\r\n                        <StyledTableCell className='table-cell' align='right'>\r\n                           No % change{' '}\r\n                        </StyledTableCell>\r\n                     )}\r\n                  </StyledTableRow>\r\n               ))}\r\n            </TableBody>\r\n         </Table>\r\n      </TableContainer>\r\n   );\r\n}\r\n","import React from 'react';\r\nimport DropdownList from '../components/Shared/DropdownList';\r\nimport ExchangeRateTable from '../components/Rates/ExchangeRateTable';\r\n\r\nimport { Paper, Box } from '@mui/material';\r\n\r\nexport default function Rates() {\r\n   const [fromCurrency, setFromCurrency] = React.useState('AUD');\r\n   return (\r\n      <Box\r\n         className='rates-container'\r\n         sx={{ display: 'flex', overflowX: 'scroll' }}\r\n      >\r\n         <Paper elevation={12} className='rates-wrapper'>\r\n            <DropdownList\r\n               name='Base currency'\r\n               value={fromCurrency}\r\n               onChange={(e) => setFromCurrency(e.target.value)}\r\n            />\r\n            <ExchangeRateTable fromCurrency={fromCurrency} />\r\n         </Paper>\r\n      </Box>\r\n   );\r\n}\r\n","import * as React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { Box } from '@mui/system';\r\n\r\nexport default function LineCharts(props) {\r\n   const { toCurrency, fromCurrency } = props;\r\n\r\n   let timeSeries = useSelector((state) => state.exchanges.TimseSeries);\r\n\r\n   let exchangeRateOverTime = useSelector(\r\n      (state) => state.exchanges.AUDExchangeRates\r\n   );\r\n\r\n   const plotData = {\r\n      labels: timeSeries,\r\n      datasets: [\r\n         {\r\n            label: 'Change in exchange rate',\r\n            data: exchangeRateOverTime[fromCurrency][toCurrency],\r\n            fill: false,\r\n            backgroundColor: 'rgb(255, 99, 132)',\r\n            borderColor: 'rgba(255, 99, 132, 0.2)',\r\n         },\r\n      ],\r\n   };\r\n\r\n   const options = {\r\n      scales: {\r\n         yAxes: [\r\n            {\r\n               ticks: {\r\n                  beginAtZero: true,\r\n               },\r\n            },\r\n         ],\r\n      },\r\n\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n         position: 'top',\r\n      },\r\n   };\r\n\r\n   return (\r\n      <Box className='chart-wrapper'>\r\n         <Line data={plotData} options={options} />\r\n      </Box>\r\n   );\r\n}\r\n","import React from 'react';\r\nimport { useGetExchangeRatesByCurrencyQuery } from '../../services/currencyAPIs';\r\nimport { currencySymbols } from '../Shared/CurrencySymbols';\r\nimport { addTimeSeries, addAUDExchangeRates } from '../../app/exchangesSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst getResults = (data) => {\r\n   return [data.data, data.error, data.isLoading, data.isFetching];\r\n};\r\n\r\nconst getDate = () => {\r\n   var d = new Date();\r\n   return d.toLocaleString();\r\n};\r\n\r\nexport default function ChunckCalls(props) {\r\n   const { fromCurrency, toCurrency, pollingInterval } = props;\r\n   const dispatch = useDispatch();\r\n\r\n   //polling only 5 countries ....\r\n\r\n   const audRates = useGetExchangeRatesByCurrencyQuery(\r\n      `latest/currencies/aud.json`,\r\n      {\r\n         pollingInterval,\r\n      }\r\n   );\r\n\r\n   const [audData, audError, audIsLoading, audIsFetching] =\r\n      getResults(audRates);\r\n\r\n   const inrRates = useGetExchangeRatesByCurrencyQuery(\r\n      `latest/currencies/inr.json`,\r\n      {\r\n         pollingInterval,\r\n      }\r\n   );\r\n\r\n   const [inrData, inrError, inrIsLoading, inrIsFetching] =\r\n      getResults(inrRates);\r\n\r\n   const usdRates = useGetExchangeRatesByCurrencyQuery(\r\n      `latest/currencies/usd.json`,\r\n      {\r\n         pollingInterval,\r\n      }\r\n   );\r\n\r\n   const [usdData, usdError, usdIsLoading, usdIsFetching] =\r\n      getResults(usdRates);\r\n\r\n   const eurRates = useGetExchangeRatesByCurrencyQuery(\r\n      `latest/currencies/eur.json`,\r\n      {\r\n         pollingInterval,\r\n      }\r\n   );\r\n\r\n   const [eurData, eurError, eurIsLoading, eurIsFetching] =\r\n      getResults(eurRates);\r\n\r\n   const crcRates = useGetExchangeRatesByCurrencyQuery(\r\n      `latest/currencies/crc.json`,\r\n      {\r\n         pollingInterval,\r\n      }\r\n   );\r\n\r\n   const [crcData, crcError, crcIsLoading, crcIsFetching] =\r\n      getResults(crcRates);\r\n\r\n   const data = [audData, inrData, usdData, eurData, crcData];\r\n   const countries = ['aud', 'inr', 'usd', 'eur', 'crc'];\r\n\r\n   //storing data in redux\r\n   const storeExchangeRates = async () => {\r\n      for (var i = 0; i < data.length; i++) {\r\n         //  console.log([countries[i]]);\r\n         if (data[i] !== undefined) {\r\n            Object.keys(data[i][countries[i]]).map((currency) => {\r\n               if (currencySymbols[currency.toUpperCase()] != undefined) {\r\n                  dispatch(\r\n                     addAUDExchangeRates([\r\n                        countries[i],\r\n                        currency,\r\n                        data[i][countries[i]][currency],\r\n                     ])\r\n                  );\r\n               }\r\n            });\r\n         }\r\n      }\r\n      const dateTime = getDate();\r\n      dispatch(addTimeSeries(dateTime));\r\n   };\r\n\r\n   React.useEffect(() => {\r\n      if (\r\n         audIsFetching ||\r\n         usdIsFetching ||\r\n         inrIsFetching ||\r\n         eurIsFetching ||\r\n         crcIsFetching\r\n      )\r\n         storeExchangeRates();\r\n   }, [crcIsFetching]);\r\n\r\n   if (\r\n      !audData?.[countries[0]] ||\r\n      !inrData?.[countries[1]] ||\r\n      !usdData?.[countries[2]] ||\r\n      !eurData?.[countries[3]] ||\r\n      !crcData?.[countries[4]]\r\n   ) {\r\n      return null;\r\n   }\r\n\r\n   return <div></div>;\r\n}\r\n","import * as React from 'react';\r\nimport DropdownList from '../components/Shared/DropdownList';\r\nimport LineCharts from '../components/charts/LineCharts';\r\n\r\nimport { Paper, Box, Grid, Typography } from '@mui/material';\r\nimport ChunckCalls from '../components/charts/ChunckCalls';\r\n\r\n// const getDate = () => {\r\n//    var d = new Date();\r\n//    return d.toLocaleString();\r\n// };\r\n\r\nexport default function Charts() {\r\n   const [fromCurrency, setFromCurrency] = React.useState('AUD');\r\n   const [toCurrency, setToCurrency] = React.useState('USD');\r\n\r\n   const [pollingInterval, setPollingInterval] = React.useState(5000);\r\n\r\n   return (\r\n      <Box\r\n         className='charts-container'\r\n         sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            flexWrap: 'wrap',\r\n            overflow: 'hidden',\r\n         }}\r\n         p={1}\r\n      >\r\n         <Paper elevation={12} className='charts-wrapper'>\r\n            <Grid\r\n               container\r\n               spacing={1}\r\n               p={5}\r\n               direction='row'\r\n               justifyContent='center'\r\n               alignItems='center'\r\n            >\r\n               <Grid item xs={12} md={6}>\r\n                  <DropdownList\r\n                     name='From'\r\n                     value={fromCurrency}\r\n                     onChange={(e) => setFromCurrency(e.target.value)}\r\n                     isFiltered={true}\r\n                  />\r\n               </Grid>\r\n               <Grid item xs={12} md={6}>\r\n                  <DropdownList\r\n                     name='To'\r\n                     value={toCurrency}\r\n                     onChange={(e) => setToCurrency(e.target.value)}\r\n                     isFiltered={false}\r\n                  />\r\n               </Grid>\r\n            </Grid>\r\n\r\n            <Typography\r\n               sx={{ fontSize: 14, textAlign: 'center' }}\r\n               color='text.secondary'\r\n               gutterBottom\r\n               p={1}\r\n            >\r\n               Graph shows latest exchange rates for {fromCurrency} and{' '}\r\n               {toCurrency} currencies\r\n            </Typography>\r\n\r\n            <ChunckCalls\r\n               pollingInterval={pollingInterval}\r\n               toCurrency={toCurrency.toLowerCase()}\r\n               fromCurrency={fromCurrency.toLowerCase()}\r\n            />\r\n            <LineCharts\r\n               toCurrency={toCurrency.toLocaleLowerCase()}\r\n               fromCurrency={fromCurrency.toLowerCase()}\r\n            />\r\n         </Paper>\r\n      </Box>\r\n   );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { currencySymbols } from '../Shared/CurrencySymbols';\r\nimport { useGetExchangeRatesByCurrencyQuery } from '../../services/currencyAPIs';\r\nimport { addToConvertions } from '../../app/exchangesSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport { Typography } from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nexport default function Calculate(props) {\r\n   const { fromCurrency, toCurrency, amount } = props;\r\n   const [convertionAmount, setConvertionAmount] = useState(0);\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const { data } = useGetExchangeRatesByCurrencyQuery(\r\n      `latest/currencies/${fromCurrency.toLowerCase()}/${toCurrency.toLowerCase()}.json`\r\n   );\r\n\r\n   const save = (cvtAmount) => {\r\n      setConvertionAmount(cvtAmount);\r\n      let items = {\r\n         from: fromCurrency,\r\n         to: toCurrency,\r\n         amount: amount,\r\n         convertionAmount: cvtAmount,\r\n         convertionTime: Date.now(),\r\n      };\r\n\r\n      dispatch(addToConvertions(items));\r\n   };\r\n\r\n   const convert = () => {\r\n      save((Number(amount) * data[toCurrency.toLowerCase()]).toFixed(4));\r\n   };\r\n\r\n   return (\r\n      <Grid\r\n         container\r\n         spacing={1}\r\n         p={3}\r\n         direction='row'\r\n         justifyContent='center'\r\n         alignItems='center'\r\n      >\r\n         <Grid\r\n            item\r\n            xs={6}\r\n            md={4}\r\n            sx={{ alignSelf: 'center', textAlign: 'center' }}\r\n         >\r\n            <Button variant='contained' onClick={() => convert()}>\r\n               Convert\r\n            </Button>\r\n         </Grid>\r\n\r\n         <Grid\r\n            item\r\n            xs={12}\r\n            md={8}\r\n            sx={{ alignSelf: 'center', textAlign: 'center' }}\r\n         >\r\n            <div>\r\n               <Typography variant='subtitle2'>\r\n                  {' '}\r\n                  {currencySymbols[fromCurrency]} {amount} =\r\n               </Typography>\r\n               <Typography variant='h3'>\r\n                  {' '}\r\n                  {currencySymbols[toCurrency]} {convertionAmount}\r\n               </Typography>\r\n            </div>\r\n         </Grid>\r\n      </Grid>\r\n   );\r\n}\r\n","import React from 'react';\r\nimport { currencySymbols } from '../Shared/CurrencySymbols';\r\nimport Calculate from './Calculate';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Input from '@mui/material/Input';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport DropdownList from '../Shared/DropdownList';\r\nimport Grid from '@mui/material/Grid';\r\n\r\nexport default function Convert() {\r\n   const [fromCurrency, setFromCurrency] = React.useState('AUD');\r\n   const [toCurrency, setToCurrency] = React.useState('AUD');\r\n   const [amount, setAmount] = React.useState(false);\r\n\r\n   React.useEffect(() => {\r\n      console.log('coming..');\r\n   }, [toCurrency, fromCurrency]);\r\n\r\n   return (\r\n      <Box\r\n         component='form'\r\n         sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            flexDirection: 'column',\r\n         }}\r\n         noValidate\r\n         autoComplete='off'\r\n      >\r\n         <Grid\r\n            container\r\n            spacing={1}\r\n            p={5}\r\n            direction='row'\r\n            justifyContent='center'\r\n            alignItems='center'\r\n         >\r\n            <Grid item xs={7} md={4} sx={{ alignSelf: 'center' }}>\r\n               <FormControl\r\n                  variant='standard'\r\n                  sx={{\r\n                     display: 'flex',\r\n                     flexDirection: 'column',\r\n                     alignItems: 'center',\r\n                     justifyContent: 'center',\r\n                     textAlign: 'center',\r\n                  }}\r\n               >\r\n                  <Input\r\n                     id='standard-adornment-amount'\r\n                     placeholder='input amount'\r\n                     type='number'\r\n                     value={amount}\r\n                     sx={{ color: 'white' }}\r\n                     onChange={(e) => setAmount(e.target.value)}\r\n                     startAdornment={\r\n                        <InputAdornment position='start'>\r\n                           {currencySymbols[fromCurrency]}\r\n                        </InputAdornment>\r\n                     }\r\n                  />\r\n               </FormControl>\r\n            </Grid>\r\n            <Grid item xs={7} md={4}>\r\n               <DropdownList\r\n                  name='From'\r\n                  value={fromCurrency}\r\n                  onChange={(e) => setFromCurrency(e.target.value)}\r\n                  isFiltered={false}\r\n               />\r\n            </Grid>\r\n            <Grid item xs={7} md={4}>\r\n               <DropdownList\r\n                  name='To'\r\n                  value={toCurrency}\r\n                  onChange={(e) => setToCurrency(e.target.value)}\r\n                  isFiltered={false}\r\n               />\r\n            </Grid>\r\n         </Grid>\r\n         <Calculate\r\n            fromCurrency={fromCurrency}\r\n            toCurrency={toCurrency}\r\n            amount={amount}\r\n         />\r\n      </Box>\r\n   );\r\n}\r\n","import * as React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst getDate = (date) => {\r\n   var d = new Date(date);\r\n   return d.toLocaleString();\r\n};\r\n\r\nexport default function ConversionHistoryCard() {\r\n   let convertionsList = useSelector(\r\n      (state) => state.exchanges.convertionsList\r\n   );\r\n   let arrayForSort = [...convertionsList];\r\n\r\n   let len = arrayForSort.length;\r\n\r\n   return (\r\n      <Box\r\n         sx={{\r\n            minWidth: 275,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            marginTop: '1%',\r\n         }}\r\n      >\r\n         {len ? (\r\n            arrayForSort.reverse().map((exchange, index) => (\r\n               <Card key={index} variant='outlined'>\r\n                  <CardContent>\r\n                     <Typography\r\n                        sx={{ fontSize: 14 }}\r\n                        color='text.secondary'\r\n                        gutterBottom\r\n                     >\r\n                        {getDate(exchange?.convertionTime)}\r\n                     </Typography>\r\n                     <Typography\r\n                        variant='h6'\r\n                        component='div'\r\n                        textAlign='center'\r\n                        className='conversion-history-record'\r\n                     >\r\n                        {exchange['amount']} {exchange['from']} to{' '}\r\n                        {exchange['convertionAmount']} {exchange['to']}\r\n                     </Typography>\r\n                  </CardContent>\r\n               </Card>\r\n            ))\r\n         ) : (\r\n            <Typography\r\n               sx={{ fontSize: 14, textAlign: 'center' }}\r\n               color='text.secondary'\r\n               gutterBottom\r\n            >\r\n               No previous conversions found!\r\n            </Typography>\r\n         )}\r\n      </Box>\r\n   );\r\n}\r\n","import React from 'react';\r\nimport Convert from '../components/saved/Convert';\r\nimport ConversionHistoryCard from '../components/saved/ConversionHistoryCard';\r\nimport { Paper, Box } from '@mui/material';\r\n\r\nexport default function Conversion() {\r\n   return (\r\n      <Box\r\n         className='conversion-container'\r\n         sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n         }}\r\n      >\r\n         <Paper elevation={12} className='conversion-wrapper'>\r\n            <Convert />\r\n            <ConversionHistoryCard />\r\n         </Paper>\r\n      </Box>\r\n   );\r\n}\r\n","import * as React from 'react';\r\nimport Rates from '../../pages/Rates';\r\nimport Charts from '../../pages/Charts';\r\nimport Conversion from '../../pages/Conversion';\r\n\r\nimport Box from '@mui/material/Box';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport { AppBar, Paper } from '@mui/material';\r\n\r\nexport default function CenteredTabs() {\r\n   const [value, setValue] = React.useState(0);\r\n\r\n   const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n   };\r\n\r\n   return (\r\n      <Box className='nav-container' sx={{ width: '100%' }}>\r\n         <Paper>\r\n            <Tabs value={value} onChange={handleChange} centered>\r\n               <Tab label='Rates' />\r\n               <Tab label='Charts' />\r\n               <Tab label='Conversion' />\r\n            </Tabs>\r\n            {value === 0 && <Rates />}\r\n            {value === 1 && <Charts />}\r\n            {value === 2 && <Conversion />}\r\n         </Paper>\r\n      </Box>\r\n   );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Container from '@mui/material/Container';\r\nimport Tabs from './components/Shared/Tabs';\r\n\r\nfunction App() {\r\n   return (\r\n      <div className='app'>\r\n         <Container fixed className='app-wrapper'>\r\n            <Tabs />\r\n         </Container>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n// Or from '@reduxjs/toolkit/query/react'\r\nimport exchangesReducer from './exchangesSlice';\r\nimport { setupListeners } from '@reduxjs/toolkit/query';\r\nimport { exchangeApi } from '../services/currencyAPIs';\r\n\r\nexport const store = configureStore({\r\n   reducer: {\r\n      // Add the generated reducer as a specific top-level slice\r\n      exchanges: exchangesReducer,\r\n      [exchangeApi.reducerPath]: exchangeApi.reducer,\r\n   },\r\n   // Adding the api middleware enables caching, invalidation, polling,\r\n   // and other useful features of `rtk-query`.\r\n   middleware: (getDefaultMiddleware) =>\r\n      getDefaultMiddleware().concat(exchangeApi.middleware),\r\n});\r\n\r\n// optional, but required for refetchOnFocus/refetchOnReconnect behaviors\r\n// see `setupListeners` docs - takes an optional callback as the 2nd arg for customization\r\nsetupListeners(store.dispatch);\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { ThemeProvider } from '@emotion/react';\r\nimport { darkTheme } from './configs/themes';\r\n\r\nimport App from './App';\r\nimport { store } from './app/store';\r\n\r\nReactDom.render(\r\n   <Provider store={store}>\r\n      <ThemeProvider theme={darkTheme}>\r\n         <App />\r\n      </ThemeProvider>\r\n   </Provider>,\r\n   document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}